[33mcommit 73b5a0851c59fd242473b96112bf1646f49cb0a3[m
Author: chenz <chen.zhang6@gmail.com>
Date:   Sat Jun 24 17:21:49 2017 -0400

    First Commit

[1mdiff --git a/CMakeLists.txt b/CMakeLists.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..936e75a[m
[1m--- /dev/null[m
[1m+++ b/CMakeLists.txt[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32mproject(MPC)[m
[32m+[m
[32m+[m[32mcmake_minimum_required (VERSION 3.5)[m
[32m+[m
[32m+[m[32m# -g allows for gdb debugging[m
[32m+[m[32m# turn on -03 for best performance[m
[32m+[m[32madd_definitions(-std=c++11 -O3)[m
[32m+[m
[32m+[m[32mset(CXX_FLAGS "-Wall")[m
[32m+[m[32mset(CMAKE_CXX_FLAGS, "${CXX_FLAGS}")[m
[32m+[m
[32m+[m[32mset(sources src/MPC.cpp src/main.cpp)[m
[32m+[m
[32m+[m[32minclude_directories(/usr/local/include)[m
[32m+[m[32mlink_directories(/usr/local/lib)[m
[32m+[m[32minclude_directories(src/Eigen-3.3)[m
[32m+[m
[32m+[m[32mif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")[m
[32m+[m
[32m+[m[32minclude_directories(/usr/local/opt/openssl/include)[m
[32m+[m[32mlink_directories(/usr/local/opt/openssl/lib)[m
[32m+[m[32mlink_directories(/usr/local/Cellar/libuv/1.11.0/lib)[m
[32m+[m
[32m+[m[32mendif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")[m
[32m+[m
[32m+[m[32madd_executable(mpc ${sources})[m
[32m+[m
[32m+[m[32mtarget_link_libraries(mpc ipopt z ssl uv uWS)[m
[32m+[m
[1mdiff --git a/DATA.md b/DATA.md[m
[1mnew file mode 100644[m
[1mindex 0000000..63d2e1d[m
[1m--- /dev/null[m
[1m+++ b/DATA.md[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32m# Websocket Data[m
[32m+[m
[32m+[m[32mThis document describes the JSON object send back from the simulator command server.[m
[32m+[m
[32m+[m[32mFields:[m
[32m+[m
[32m+[m[32m* `ptsx` (Array<float>) - The global x positions of the waypoints.[m
[32m+[m[32m* `ptsy` (Array<float>) - The global y positions of the waypoints. This corresponds to the z coordinate in Unity[m
[32m+[m[32msince y is the up-down direction.[m
[32m+[m[32m* `psi` (float) - The orientation of the vehicle in **radians** converted from the Unity format to the standard format expected in most mathemetical functions (more details below).[m
[32m+[m[32m* `psi_unity` (float) - The orientation of the vehicle in **radians**. This is an orientation commonly used in [navigation](https://en.wikipedia.org/wiki/Polar_coordinate_system#Position_and_navigation).[m
[32m+[m[32m* `x` (float) - The global x position of the vehicle.[m
[32m+[m[32m* `y` (float) - The global y position of the vehicle.[m
[32m+[m[32m* `steering_angle` (float) - The current steering angle in **radians**.[m
[32m+[m[32m* `throttle` (float) - The current throttle value [-1, 1].[m
[32m+[m[32m* `speed` (float) - The current velocity in **mph**.[m
[32m+[m
[32m+[m
[32m+[m[32m### `psi` and `psi_unity` representations[m
[32m+[m
[32m+[m[32m`psi`[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m//            90[m
[32m+[m[32m//[m
[32m+[m[32m//  180                   0/360[m
[32m+[m[32m//[m
[32m+[m[32m//            270[m
[32m+[m[32m```[m
[32m+[m
[32m+[m
[32m+[m[32m`psi_unity`[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m//            0/360[m
[32m+[m[32m//[m
[32m+[m[32m//  270                   90[m
[32m+[m[32m//[m
[32m+[m[32m//            180[m
[32m+[m[32m```[m
[32m+[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..a03741a[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,115 @@[m
[32m+[m[32m# CarND-Controls-MPC[m
[32m+[m[32mSelf-Driving Car Engineer Nanodegree Program[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m## Dependencies[m
[32m+[m
[32m+[m[32m* cmake >= 3.5[m
[32m+[m[32m * All OSes: [click here for installation instructions](https://cmake.org/install/)[m
[32m+[m[32m* make >= 4.1[m
[32m+[m[32m  * Linux: make is installed by default on most Linux distros[m
[32m+[m[32m  * Mac: [install Xcode command line tools to get make](https://developer.apple.com/xcode/features/)[m
[32m+[m[32m  * Windows: [Click here for installation instructions](http://gnuwin32.sourceforge.net/packages/make.htm)[m
[32m+[m[32m* gcc/g++ >= 5.4[m
[32m+[m[32m  * Linux: gcc / g++ is installed by default on most Linux distros[m
[32m+[m[32m  * Mac: same deal as make - [install Xcode command line tools]((https://developer.apple.com/xcode/features/)[m
[32m+[m[32m  * Windows: recommend using [MinGW](http://www.mingw.org/)[m
[32m+[m[32m* [uWebSockets](https://github.com/uWebSockets/uWebSockets)[m
[32m+[m[32m  * Run either `install-mac.sh` or `install-ubuntu.sh`.[m
[32m+[m[32m  * If you install from source, checkout to commit `e94b6e1`, i.e.[m
[32m+[m[32m    ```[m
[32m+[m[32m    git clone https://github.com/uWebSockets/uWebSockets[m[41m [m
[32m+[m[32m    cd uWebSockets[m
[32m+[m[32m    git checkout e94b6e1[m
[32m+[m[32m    ```[m
[32m+[m[32m    Some function signatures have changed in v0.14.x. See [this PR](https://github.com/udacity/CarND-MPC-Project/pull/3) for more details.[m
[32m+[m[32m* Fortran Compiler[m
[32m+[m[32m  * Mac: `brew install gcc` (might not be required)[m
[32m+[m[32m  * Linux: `sudo apt-get install gfortran`. Additionall you have also have to install gcc and g++, `sudo apt-get install gcc g++`. Look in [this Dockerfile](https://github.com/udacity/CarND-MPC-Quizzes/blob/master/Dockerfile) for more info.[m
[32m+[m[32m* [Ipopt](https://projects.coin-or.org/Ipopt)[m
[32m+[m[32m  * Mac: `brew install ipopt`[m
[32m+[m[32m  * Linux[m
[32m+[m[32m    * You will need a version of Ipopt 3.12.1 or higher. The version available through `apt-get` is 3.11.x. If you can get that version to work great but if not there's a script `install_ipopt.sh` that will install Ipopt. You just need to download the source from the Ipopt [releases page](https://www.coin-or.org/download/source/Ipopt/) or the [Github releases](https://github.com/coin-or/Ipopt/releases) page.[m
[32m+[m[32m    * Then call `install_ipopt.sh` with the source directory as the first argument, ex: `bash install_ipopt.sh Ipopt-3.12.1`.[m[41m [m
[32m+[m[32m  * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.[m
[32m+[m[32m* [CppAD](https://www.coin-or.org/CppAD/)[m
[32m+[m[32m  * Mac: `brew install cppad`[m
[32m+[m[32m  * Linux `sudo apt-get install cppad` or equivalent.[m
[32m+[m[32m  * Windows: TODO. If you can use the Linux subsystem and follow the Linux instructions.[m
[32m+[m[32m* [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page). This is already part of the repo so you shouldn't have to worry about it.[m
[32m+[m[32m* Simulator. You can download these from the [releases tab](https://github.com/udacity/self-driving-car-sim/releases).[m
[32m+[m[32m* Not a dependency but read the [DATA.md](./DATA.md) for a description of the data sent back from the simulator.[m
[32m+[m
[32m+[m
[32m+[m[32m## Basic Build Instructions[m
[32m+[m
[32m+[m
[32m+[m[32m1. Clone this repo.[m
[32m+[m[32m2. Make a build directory: `mkdir build && cd build`[m
[32m+[m[32m3. Compile: `cmake .. && make`[m
[32m+[m[32m4. Run it: `./mpc`.[m
[32m+[m
[32m+[m[32m## Tips[m
[32m+[m
[32m+[m[32m1. It's recommended to test the MPC on basic examples to see if your implementation behaves as desired. One possible example[m
[32m+[m[32mis the vehicle starting offset of a straight line (reference). If the MPC implementation is correct, after some number of timesteps[m
[32m+[m[32m(not too many) it should find and track the reference line.[m
[32m+[m[32m2. The `lake_track_waypoints.csv` file has the waypoints of the lake track. You could use this to fit polynomials and points and see of how well your model tracks curve. NOTE: This file might be not completely in sync with the simulator so your solution should NOT depend on it.[m
[32m+[m[32m3. For visualization this C++ [matplotlib wrapper](https://github.com/lava/matplotlib-cpp) could be helpful.[m
[32m+[m
[32m+[m[32m## Editor Settings[m
[32m+[m
[32m+[m[32mWe've purposefully kept editor configuration files out of this repo in order to[m
[32m+[m[32mkeep it as simple and environment agnostic as possible. However, we recommend[m
[32m+[m[32musing the following settings:[m
[32m+[m
[32m+[m[32m* indent using spaces[m
[32m+[m[32m* set tab width to 2 spaces (keeps the matrices in source code aligned)[m
[32m+[m
[32m+[m[32m## Code Style[m
[32m+[m
[32m+[m[32mPlease (do your best to) stick to [Google's C++ style guide](https://google.github.io/styleguide/cppguide.html).[m
[32m+[m
[32m+[m[32m## Project Instructions and Rubric[m
[32m+[m
[32m+[m[32mNote: regardless of the changes you make, your project must be buildable using[m
[32m+[m[32mcmake and make![m
[32m+[m
[32m+[m[32mMore information is only accessible by people who are already enrolled in Term 2[m
[32m+[m[32mof CarND. If you are enrolled, see [the project page](https://classroom.udacity.com/nanodegrees/nd013/parts/40f38239-66b6-46ec-ae68-03afd8a601c8/modules/f1820894-8322-4bb3-81aa-b26b3c6dcbaf/lessons/b1ff3be0-c904-438e-aad3-2b5379f0e0c3/concepts/1a2255a0-e23c-44cf-8d41-39b8a3c8264a)[m
[32m+[m[32mfor instructions and the project rubric.[m
[32m+[m
[32m+[m[32m## Hints![m
[32m+[m
[32m+[m[32m* You don't have to follow this directory structure, but if you do, your work[m
[32m+[m[32m  will span all of the .cpp files here. Keep an eye out for TODOs.[m
[32m+[m
[32m+[m[32m## Call for IDE Profiles Pull Requests[m
[32m+[m
[32m+[m[32mHelp your fellow students![m
[32m+[m
[32m+[m[32mWe decided to create Makefiles with cmake to keep this project as platform[m
[32m+[m[32magnostic as possible. Similarly, we omitted IDE profiles in order to we ensure[m
[32m+[m[32mthat students don't feel pressured to use one IDE or another.[m
[32m+[m
[32m+[m[32mHowever! I'd love to help people get up and running with their IDEs of choice.[m
[32m+[m[32mIf you've created a profile for an IDE that you think other students would[m
[32m+[m[32mappreciate, we'd love to have you add the requisite profile files and[m
[32m+[m[32minstructions to ide_profiles/. For example if you wanted to add a VS Code[m
[32m+[m[32mprofile, you'd add:[m
[32m+[m
[32m+[m[32m* /ide_profiles/vscode/.vscode[m
[32m+[m[32m* /ide_profiles/vscode/README.md[m
[32m+[m
[32m+[m[32mThe README should explain what the profile does, how to take advantage of it,[m
[32m+[m[32mand how to install it.[m
[32m+[m
[32m+[m[32mFrankly, I've never been involved in a project with multiple IDE profiles[m
[32m+[m[32mbefore. I believe the best way to handle this would be to keep them out of the[m
[32m+[m[32mrepo root to avoid clutter. My expectation is that most profiles will include[m
[32m+[m[32minstructions to copy files to a new location to get picked up by the IDE, but[m
[32m+[m[32mthat's just a guess.[m
[32m+[m
[32m+[m[32mOne last note here: regardless of the IDE used, every submitted project must[m
[32m+[m[32mstill be compilable with cmake and make./[m
[1mdiff --git a/build/CMakeCache.txt b/build/CMakeCache.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..293c3e4[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeCache.txt[m
[36m@@ -0,0 +1,304 @@[m
[32m+[m[32m# This is the CMakeCache file.[m
[32m+[m[32m# For build in directory: /home/chenz/Documents/Udacity/MPC/CarND-MPC-Project/build[m
[32m+[m[32m# It was generated by CMake: /usr/bin/cmake[m
[32m+[m[32m# You can edit this file to change values found and used by cmake.[m
[32m+[m[32m# If you do not want to change any of the values, simply exit the editor.[m
[32m+[m[32m# If you do want to change a value, simply edit, save, and exit the editor.[m
[32m+[m[32m# The syntax for the file is as follows:[m
[32m+[m[32m# KEY:TYPE=VALUE[m
[32m+[m[32m# KEY is the name of a variable in the cache.[m
[32m+[m[32m# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.[m
[32m+[m[32m# VALUE is the current value for the KEY.[m
[32m+[m
[32m+[m[32m########################[m
[32m+[m[32m# EXTERNAL cache entries[m
[32m+[m[32m########################[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_AR:FILEPATH=/usr/bin/ar[m
[32m+[m
[32m+[m[32m//Choose the type of build, options are: None(CMAKE_CXX_FLAGS or[m
[32m+[m[32m// CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel.[m
[32m+[m[32mCMAKE_BUILD_TYPE:STRING=[m
[32m+[m
[32m+[m[32m//Enable/Disable color output during build.[m
[32m+[m[32mCMAKE_COLOR_MAKEFILE:BOOL=ON[m
[32m+[m
[32m+[m[32m//CXX compiler[m
[32m+[m[32mCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/c++[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during all build types.[m
[32m+[m[32mCMAKE_CXX_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during debug builds.[m
[32m+[m[32mCMAKE_CXX_FLAGS_DEBUG:STRING=-g[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds for minimum[m
[32m+[m[32m// size.[m
[32m+[m[32mCMAKE_CXX_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds.[m
[32m+[m[32mCMAKE_CXX_FLAGS_RELEASE:STRING=-O3 -DNDEBUG[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds with debug info.[m
[32m+[m[32mCMAKE_CXX_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG[m
[32m+[m
[32m+[m[32m//C compiler[m
[32m+[m[32mCMAKE_C_COMPILER:FILEPATH=/usr/bin/cc[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during all build types.[m
[32m+[m[32mCMAKE_C_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during debug builds.[m
[32m+[m[32mCMAKE_C_FLAGS_DEBUG:STRING=-g[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds for minimum[m
[32m+[m[32m// size.[m
[32m+[m[32mCMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds.[m
[32m+[m[32mCMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG[m
[32m+[m
[32m+[m[32m//Flags used by the compiler during release builds with debug info.[m
[32m+[m[32mCMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG[m
[32m+[m
[32m+[m[32m//Flags used by the linker.[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during debug builds.[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release minsize builds.[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release builds.[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during Release with Debug Info builds.[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=[m
[32m+[m
[32m+[m[32m//Enable/Disable output of compile commands during generation.[m
[32m+[m[32mCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF[m
[32m+[m
[32m+[m[32m//Install path prefix, prepended onto install directories.[m
[32m+[m[32mCMAKE_INSTALL_PREFIX:PATH=/usr/local[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_LINKER:FILEPATH=/usr/bin/ld[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make[m
[32m+[m
[32m+[m[32m//Flags used by the linker during the creation of modules.[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during debug builds.[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release minsize builds.[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release builds.[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during Release with Debug Info builds.[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_NM:FILEPATH=/usr/bin/nm[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump[m
[32m+[m
[32m+[m[32m//Value Computed by CMake[m
[32m+[m[32mCMAKE_PROJECT_NAME:STATIC=MPC[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_RANLIB:FILEPATH=/usr/bin/ranlib[m
[32m+[m
[32m+[m[32m//Flags used by the linker during the creation of dll's.[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during debug builds.[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release minsize builds.[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release builds.[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during Release with Debug Info builds.[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=[m
[32m+[m
[32m+[m[32m//If set, runtime paths are not added when installing shared libraries,[m
[32m+[m[32m// but are added when building.[m
[32m+[m[32mCMAKE_SKIP_INSTALL_RPATH:BOOL=NO[m
[32m+[m
[32m+[m[32m//If set, runtime paths are not added when using shared libraries.[m
[32m+[m[32mCMAKE_SKIP_RPATH:BOOL=NO[m
[32m+[m
[32m+[m[32m//Flags used by the linker during the creation of static libraries.[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during debug builds.[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release minsize builds.[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during release builds.[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=[m
[32m+[m
[32m+[m[32m//Flags used by the linker during Release with Debug Info builds.[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=[m
[32m+[m
[32m+[m[32m//Path to a program.[m
[32m+[m[32mCMAKE_STRIP:FILEPATH=/usr/bin/strip[m
[32m+[m
[32m+[m[32m//If this value is on, makefiles will be generated without the[m
[32m+[m[32m// .SILENT directive, and all commands will be echoed to the console[m
[32m+[m[32m// during the make.  This is useful for debugging only. With Visual[m
[32m+[m[32m// Studio IDE projects all commands are done without /nologo.[m
[32m+[m[32mCMAKE_VERBOSE_MAKEFILE:BOOL=FALSE[m
[32m+[m
[32m+[m[32m//Value Computed by CMake[m
[32m+[m[32mMPC_BINARY_DIR:STATIC=/home/chenz/Documents/Udacity/MPC/CarND-MPC-Project/build[m
[32m+[m
[32m+[m[32m//Value Computed by CMake[m
[32m+[m[32mMPC_SOURCE_DIR:STATIC=/home/chenz/Documents/Udacity/MPC/CarND-MPC-Project[m
[32m+[m
[32m+[m
[32m+[m[32m########################[m
[32m+[m[32m# INTERNAL cache entries[m
[32m+[m[32m########################[m
[32m+[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_AR[m
[32m+[m[32mCMAKE_AR-ADVANCED:INTERNAL=1[m
[32m+[m[32m//This is the directory where this CMakeCache.txt was created[m
[32m+[m[32mCMAKE_CACHEFILE_DIR:INTERNAL=/home/chenz/Documents/Udacity/MPC/CarND-MPC-Project/build[m
[32m+[m[32m//Major version of cmake used to create the current loaded cache[m
[32m+[m[32mCMAKE_CACHE_MAJOR_VERSION:INTERNAL=3[m
[32m+[m[32m//Minor version of cmake used to create the current loaded cache[m
[32m+[m[32mCMAKE_CACHE_MINOR_VERSION:INTERNAL=5[m
[32m+[m[32m//Patch version of cmake used to create the current loaded cache[m
[32m+[m[32mCMAKE_CACHE_PATCH_VERSION:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE[m
[32m+[m[32mCMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//Path to CMake executable.[m
[32m+[m[32mCMAKE_COMMAND:INTERNAL=/usr/bin/cmake[m
[32m+[m[32m//Path to cpack program executable.[m
[32m+[m[32mCMAKE_CPACK_COMMAND:INTERNAL=/usr/bin/cpack[m
[32m+[m[32m//Path to ctest program executable.[m
[32m+[m[32mCMAKE_CTEST_COMMAND:INTERNAL=/usr/bin/ctest[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_COMPILER[m
[32m+[m[32mCMAKE_CXX_COMPILER-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_FLAGS[m
[32m+[m[32mCMAKE_CXX_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_CXX_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_CXX_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_CXX_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_CXX_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_CXX_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_COMPILER[m
[32m+[m[32mCMAKE_C_COMPILER-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_FLAGS[m
[32m+[m[32mCMAKE_C_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//Executable file format[m
[32m+[m[32mCMAKE_EXECUTABLE_FORMAT:INTERNAL=ELF[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS[m
[32m+[m[32mCMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//Name of external makefile project generator.[m
[32m+[m[32mCMAKE_EXTRA_GENERATOR:INTERNAL=[m
[32m+[m[32m//Name of generator.[m
[32m+[m[32mCMAKE_GENERATOR:INTERNAL=Unix Makefiles[m
[32m+[m[32m//Name of generator platform.[m
[32m+[m[32mCMAKE_GENERATOR_PLATFORM:INTERNAL=[m
[32m+[m[32m//Name of generator toolset.[m
[32m+[m[32mCMAKE_GENERATOR_TOOLSET:INTERNAL=[m
[32m+[m[32m//Source directory with the top level CMakeLists.txt file for this[m
[32m+[m[32m// project[m
[32m+[m[32mCMAKE_HOME_DIRECTORY:INTERNAL=/home/chenz/Documents/Udacity/MPC/CarND-MPC-Project[m
[32m+[m[32m//Install .so files without execute permission.[m
[32m+[m[32mCMAKE_INSTALL_SO_NO_EXE:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_LINKER[m
[32m+[m[32mCMAKE_LINKER-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MAKE_PROGRAM[m
[32m+[m[32mCMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_NM[m
[32m+[m[32mCMAKE_NM-ADVANCED:INTERNAL=1[m
[32m+[m[32m//number of local generators[m
[32m+[m[32mCMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_OBJCOPY[m
[32m+[m[32mCMAKE_OBJCOPY-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_OBJDUMP[m
[32m+[m[32mCMAKE_OBJDUMP-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_RANLIB[m
[32m+[m[32mCMAKE_RANLIB-ADVANCED:INTERNAL=1[m
[32m+[m[32m//Path to CMake installation.[m
[32m+[m[32mCMAKE_ROOT:INTERNAL=/usr/share/cmake-3.5[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH[m
[32m+[m[32mCMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_SKIP_RPATH[m
[32m+[m[32mCMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO[m
[32m+[m[32mCMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_STRIP[m
[32m+[m[32mCMAKE_STRIP-ADVANCED:INTERNAL=1[m
[32m+[m[32m//uname command[m
[32m+[m[32mCMAKE_UNAME:INTERNAL=/bin/uname[m
[32m+[m[32m//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE[m
[32m+[m[32mCMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1[m
[32m+[m
[1mdiff --git a/build/CMakeFiles/3.5.1/CMakeCCompiler.cmake b/build/CMakeFiles/3.5.1/CMakeCCompiler.cmake[m
[1mnew file mode 100644[m
[1mindex 0000000..f40522e[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeFiles/3.5.1/CMakeCCompiler.cmake[m
[36m@@ -0,0 +1,67 @@[m
[32m+[m[32mset(CMAKE_C_COMPILER "/usr/bin/cc")[m
[32m+[m[32mset(CMAKE_C_COMPILER_ARG1 "")[m
[32m+[m[32mset(CMAKE_C_COMPILER_ID "GNU")[m
[32m+[m[32mset(CMAKE_C_COMPILER_VERSION "5.4.0")[m
[32m+[m[32mset(CMAKE_C_COMPILER_WRAPPER "")[m
[32m+[m[32mset(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")[m
[32m+[m[32mset(CMAKE_C_COMPILE_FEATURES "c_function_prototypes;c_restrict;c_variadic_macros;c_static_assert")[m
[32m+[m[32mset(CMAKE_C90_COMPILE_FEATURES "c_function_prototypes")[m
[32m+[m[32mset(CMAKE_C99_COMPILE_FEATURES "c_restrict;c_variadic_macros")[m
[32m+[m[32mset(CMAKE_C11_COMPILE_FEATURES "c_static_assert")[m
[32m+[m
[32m+[m[32mset(CMAKE_C_PLATFORM_ID "Linux")[m
[32m+[m[32mset(CMAKE_C_SIMULATE_ID "")[m
[32m+[m[32mset(CMAKE_C_SIMULATE_VERSION "")[m
[32m+[m
[32m+[m[32mset(CMAKE_AR "/usr/bin/ar")[m
[32m+[m[32mset(CMAKE_RANLIB "/usr/bin/ranlib")[m
[32m+[m[32mset(CMAKE_LINKER "/usr/bin/ld")[m
[32m+[m[32mset(CMAKE_COMPILER_IS_GNUCC 1)[m
[32m+[m[32mset(CMAKE_C_COMPILER_LOADED 1)[m
[32m+[m[32mset(CMAKE_C_COMPILER_WORKS TRUE)[m
[32m+[m[32mset(CMAKE_C_ABI_COMPILED TRUE)[m
[32m+[m[32mset(CMAKE_COMPILER_IS_MINGW )[m
[32m+[m[32mset(CMAKE_COMPILER_IS_CYGWIN )[m
[32m+[m[32mif(CMAKE_COMPILER_IS_CYGWIN)[m
[32m+[m[32m  set(CYGWIN 1)[m
[32m+[m[32m  set(UNIX 1)[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mset(CMAKE_C_COMPILER_ENV_VAR "CC")[m
[32m+[m
[32m+[m[32mif(CMAKE_COMPILER_IS_MINGW)[m
[32m+[m[32m  set(MINGW 1)[m
[32m+[m[32mendif()[m
[32m+[m[32mset(CMAKE_C_COMPILER_ID_RUN 1)[m
[32m+[m[32mset(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)[m
[32m+[m[32mset(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)[m
[32m+[m[32mset(CMAKE_C_LINKER_PREFERENCE 10)[m
[32m+[m
[32m+[m[32m# Save compiler ABI information.[m
[32m+[m[32mset(CMAKE_C_SIZEOF_DATA_PTR "8")[m
[32m+[m[32mset(CMAKE_C_COMPILER_ABI "ELF")[m
[32m+[m[32mset(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")[m
[32m+[m
[32m+[m[32mif(CMAKE_C_SIZEOF_DATA_PTR)[m
[32m+[m[32m  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mif(CMAKE_C_COMPILER_ABI)[m
[32m+[m[32m  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mif(CMAKE_C_LIBRARY_ARCHITECTURE)[m
[32m+[m[32m  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mset(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")[m
[32m+[m[32mif(CMAKE_C_CL_SHOWINCLUDES_PREFIX)[m
[32m+[m[32m  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mset(CMAKE_C_IMPLICIT_LINK_LIBRARIES "c")[m
[32m+[m[32mset(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/5;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib")[m
[32m+[m[32mset(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")[m
[1mdiff --git a/build/CMakeFiles/3.5.1/CMakeCXXCompiler.cmake b/build/CMakeFiles/3.5.1/CMakeCXXCompiler.cmake[m
[1mnew file mode 100644[m
[1mindex 0000000..013ee92[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeFiles/3.5.1/CMakeCXXCompiler.cmake[m
[36m@@ -0,0 +1,68 @@[m
[32m+[m[32mset(CMAKE_CXX_COMPILER "/usr/bin/c++")[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_ARG1 "")[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_ID "GNU")[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_VERSION "5.4.0")[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_WRAPPER "")[m
[32m+[m[32mset(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "98")[m
[32m+[m[32mset(CMAKE_CXX_COMPILE_FEATURES "cxx_template_template_parameters;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates")[m
[32m+[m[32mset(CMAKE_CXX98_COMPILE_FEATURES "cxx_template_template_parameters")[m
[32m+[m[32mset(CMAKE_CXX11_COMPILE_FEATURES "cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates")[m
[32m+[m[32mset(CMAKE_CXX14_COMPILE_FEATURES "cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates")[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_PLATFORM_ID "Linux")[m
[32m+[m[32mset(CMAKE_CXX_SIMULATE_ID "")[m
[32m+[m[32mset(CMAKE_CXX_SIMULATE_VERSION "")[m
[32m+[m
[32m+[m[32mset(CMAKE_AR "/usr/bin/ar")[m
[32m+[m[32mset(CMAKE_RANLIB "/usr/bin/ranlib")[m
[32m+[m[32mset(CMAKE_LINKER "/usr/bin/ld")[m
[32m+[m[32mset(CMAKE_COMPILER_IS_GNUCXX 1)[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_LOADED 1)[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_WORKS TRUE)[m
[32m+[m[32mset(CMAKE_CXX_ABI_COMPILED TRUE)[m
[32m+[m[32mset(CMAKE_COMPILER_IS_MINGW )[m
[32m+[m[32mset(CMAKE_COMPILER_IS_CYGWIN )[m
[32m+[m[32mif(CMAKE_COMPILER_IS_CYGWIN)[m
[32m+[m[32m  set(CYGWIN 1)[m
[32m+[m[32m  set(UNIX 1)[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_ENV_VAR "CXX")[m
[32m+[m
[32m+[m[32mif(CMAKE_COMPILER_IS_MINGW)[m
[32m+[m[32m  set(MINGW 1)[m
[32m+[m[32mendif()[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_ID_RUN 1)[m
[32m+[m[32mset(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)[m
[32m+[m[32mset(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;mm;CPP)[m
[32m+[m[32mset(CMAKE_CXX_LINKER_PREFERENCE 30)[m
[32m+[m[32mset(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)[m
[32m+[m
[32m+[m[32m# Save compiler ABI information.[m
[32m+[m[32mset(CMAKE_CXX_SIZEOF_DATA_PTR "8")[m
[32m+[m[32mset(CMAKE_CXX_COMPILER_ABI "ELF")[m
[32m+[m[32mset(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")[m
[32m+[m
[32m+[m[32mif(CMAKE_CXX_SIZEOF_DATA_PTR)[m
[32m+[m[32m  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mif(CMAKE_CXX_COMPILER_ABI)[m
[32m+[m[32m  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mif(CMAKE_CXX_LIBRARY_ARCHITECTURE)[m
[32m+[m[32m  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")[m
[32m+[m[32mif(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX)[m
[32m+[m[32m  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;c")[m
[32m+[m[32mset(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/5;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib")[m
[32m+[m[32mset(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")[m
[1mdiff --git a/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_C.bin b/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_C.bin[m
[1mnew file mode 100755[m
[1mindex 0000000..c87e38c[m
Binary files /dev/null and b/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_C.bin differ
[1mdiff --git a/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_CXX.bin b/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_CXX.bin[m
[1mnew file mode 100755[m
[1mindex 0000000..fa40640[m
Binary files /dev/null and b/build/CMakeFiles/3.5.1/CMakeDetermineCompilerABI_CXX.bin differ
[1mdiff --git a/build/CMakeFiles/3.5.1/CMakeSystem.cmake b/build/CMakeFiles/3.5.1/CMakeSystem.cmake[m
[1mnew file mode 100644[m
[1mindex 0000000..ce097ab[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeFiles/3.5.1/CMakeSystem.cmake[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mset(CMAKE_HOST_SYSTEM "Linux-4.8.0-56-generic")[m
[32m+[m[32mset(CMAKE_HOST_SYSTEM_NAME "Linux")[m
[32m+[m[32mset(CMAKE_HOST_SYSTEM_VERSION "4.8.0-56-generic")[m
[32m+[m[32mset(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mset(CMAKE_SYSTEM "Linux-4.8.0-56-generic")[m
[32m+[m[32mset(CMAKE_SYSTEM_NAME "Linux")[m
[32m+[m[32mset(CMAKE_SYSTEM_VERSION "4.8.0-56-generic")[m
[32m+[m[32mset(CMAKE_SYSTEM_PROCESSOR "x86_64")[m
[32m+[m
[32m+[m[32mset(CMAKE_CROSSCOMPILING "FALSE")[m
[32m+[m
[32m+[m[32mset(CMAKE_SYSTEM_LOADED 1)[m
[1mdiff --git a/build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c b/build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c[m
[1mnew file mode 100644[m
[1mindex 0000000..570a15e[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeFiles/3.5.1/CompilerIdC/CMakeCCompilerId.c[m
[36m@@ -0,0 +1,544 @@[m
[32m+[m[32m#ifdef __cplusplus[m
[32m+[m[32m# error "A C++ compiler has been selected for C."[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m#if defined(__18CXX)[m
[32m+[m[32m# define ID_VOID_MAIN[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m
[32m+[m[32m/* Version number components: V=Version, R=Revision, P=Patch[m
[32m+[m[32m   Version date components:   YYYY=Year, MM=Month,   DD=Day  */[m
[32m+[m
[32m+[m[32m#if defined(__INTEL_COMPILER) || defined(__ICC)[m
[32m+[m[32m# define COMPILER_ID "Intel"[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m#  define SIMULATE_ID "MSVC"[m
[32m+[m[32m# endif[m
[32m+[m[32m  /* __INTEL_COMPILER = VRP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)[m
[32m+[m[32m# if defined(__INTEL_COMPILER_UPDATE)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)[m
[32m+[m[32m# else[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(__INTEL_COMPILER_BUILD_DATE)[m
[32m+[m[32m  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */[m
[32m+[m[32m#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m   /* _MSC_VER = VVRR */[m
[32m+[m[32m#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)[m
[32m+[m[32m#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__PATHCC__)[m
[32m+[m[32m# define COMPILER_ID "PathScale"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)[m
[32m+[m[32m# if defined(__PATHCC_PATCHLEVEL__)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)[m
[32m+[m[32m# define COMPILER_ID "Embarcadero"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)[m
[32m+[m
[32m+[m[32m#elif defined(__BORLANDC__)[m
[32m+[m[32m# define COMPILER_ID "Borland"[m
[32m+[m[32m  /* __BORLANDC__ = 0xVRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__) && __WATCOMC__ < 1200[m
[32m+[m[32m# define COMPILER_ID "Watcom"[m
[32m+[m[32m   /* __WATCOMC__ = VVRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)[m
[32m+[m[32m# if (__WATCOMC__ % 10) > 0[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__)[m
[32m+[m[32m# define COMPILER_ID "OpenWatcom"[m
[32m+[m[32m   /* __WATCOMC__ = VVRP + 1100 */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)[m
[32m+[m[32m# if (__WATCOMC__ % 10) > 0[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__SUNPRO_C)[m
[32m+[m[32m# define COMPILER_ID "SunPro"[m
[32m+[m[32m# if __SUNPRO_C >= 0x5100[m
[32m+[m[32m   /* __SUNPRO_C = 0xVRRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)[m
[32m+[m[32m# else[m
[32m+[m[32m   /* __SUNPRO_CC = 0xVRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__HP_cc)[m
[32m+[m[32m# define COMPILER_ID "HP"[m
[32m+[m[32m  /* __HP_cc = VVRRPP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)[m
[32m+[m
[32m+[m[32m#elif defined(__DECC)[m
[32m+[m[32m# define COMPILER_ID "Compaq"[m
[32m+[m[32m  /* __DECC_VER = VVRRTPPPP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)[m
[32m+[m
[32m+[m[32m#elif defined(__IBMC__) && defined(__COMPILER_VER__)[m
[32m+[m[32m# define COMPILER_ID "zOS"[m
[32m+[m[32m  /* __IBMC__ = VRP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)[m
[32m+[m
[32m+[m[32m#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800[m
[32m+[m[32m# define COMPILER_ID "XL"[m
[32m+[m[32m  /* __IBMC__ = VRP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)[m
[32m+[m
[32m+[m[32m#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800[m
[32m+[m[32m# define COMPILER_ID "VisualAge"[m
[32m+[m[32m  /* __IBMC__ = VRP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)[m
[32m+[m
[32m+[m[32m#elif defined(__PGI)[m
[32m+[m[32m# define COMPILER_ID "PGI"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__PGIC__)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)[m
[32m+[m[32m# if defined(__PGIC_PATCHLEVEL__)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(_CRAYC)[m
[32m+[m[32m# define COMPILER_ID "Cray"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)[m
[32m+[m
[32m+[m[32m#elif defined(__TI_COMPILER_VERSION__)[m
[32m+[m[32m# define COMPILER_ID "TI"[m
[32m+[m[32m  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)[m
[32m+[m
[32m+[m[32m#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)[m
[32m+[m[32m# define COMPILER_ID "Fujitsu"[m
[32m+[m
[32m+[m[32m#elif defined(__TINYC__)[m
[32m+[m[32m# define COMPILER_ID "TinyCC"[m
[32m+[m
[32m+[m[32m#elif defined(__SCO_VERSION__)[m
[32m+[m[32m# define COMPILER_ID "SCO"[m
[32m+[m
[32m+[m[32m#elif defined(__clang__) && defined(__apple_build_version__)[m
[32m+[m[32m# define COMPILER_ID "AppleClang"[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m#  define SIMULATE_ID "MSVC"[m
[32m+[m[32m# endif[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__clang_major__)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__clang_minor__)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m   /* _MSC_VER = VVRR */[m
[32m+[m[32m#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)[m
[32m+[m[32m#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)[m
[32m+[m[32m# endif[m
[32m+[m[32m# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)[m
[32m+[m
[32m+[m[32m#elif defined(__clang__)[m
[32m+[m[32m# define COMPILER_ID "Clang"[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m#  define SIMULATE_ID "MSVC"[m
[32m+[m[32m# endif[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__clang_major__)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__clang_minor__)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m   /* _MSC_VER = VVRR */[m
[32m+[m[32m#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)[m
[32m+[m[32m#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__GNUC__)[m
[32m+[m[32m# define COMPILER_ID "GNU"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__GNUC__)[m
[32m+[m[32m# if defined(__GNUC_MINOR__)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(__GNUC_PATCHLEVEL__)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(_MSC_VER)[m
[32m+[m[32m# define COMPILER_ID "MSVC"[m
[32m+[m[32m  /* _MSC_VER = VVRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)[m
[32m+[m[32m# if defined(_MSC_FULL_VER)[m
[32m+[m[32m#  if _MSC_VER >= 1400[m
[32m+[m[32m    /* _MSC_FULL_VER = VVRRPPPPP */[m
[32m+[m[32m#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)[m
[32m+[m[32m#  else[m
[32m+[m[32m    /* _MSC_FULL_VER = VVRRPPPP */[m
[32m+[m[32m#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)[m
[32m+[m[32m#  endif[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(_MSC_BUILD)[m
[32m+[m[32m#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)[m
[32m+[m[32m# define COMPILER_ID "ADSP"[m
[32m+[m[32m#if defined(__VISUALDSPVERSION__)[m
[32m+[m[32m  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m#elif defined(__IAR_SYSTEMS_ICC__ ) || defined(__IAR_SYSTEMS_ICC)[m
[32m+[m[32m# define COMPILER_ID "IAR"[m
[32m+[m
[32m+[m[32m#elif defined(__ARMCC_VERSION)[m
[32m+[m[32m# define COMPILER_ID "ARMCC"[m
[32m+[m[32m#if __ARMCC_VERSION >= 1000000[m
[32m+[m[32m  /* __ARMCC_VERSION = VRRPPPP */[m
[32m+[m[32m  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)[m
[32m+[m[32m  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)[m
[32m+[m[32m  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)[m
[32m+[m[32m#else[m
[32m+[m[32m  /* __ARMCC_VERSION = VRPPPP */[m
[32m+[m[32m  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)[m
[32m+[m[32m  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)[m
[32m+[m[32m  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m
[32m+[m[32m#elif defined(SDCC)[m
[32m+[m[32m# define COMPILER_ID "SDCC"[m
[32m+[m[32m  /* SDCC = VRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)[m
[32m+[m
[32m+[m[32m#elif defined(_SGI_COMPILER_VERSION) || defined(_COMPILER_VERSION)[m
[32m+[m[32m# define COMPILER_ID "MIPSpro"[m
[32m+[m[32m# if defined(_SGI_COMPILER_VERSION)[m
[32m+[m[32m  /* _SGI_COMPILER_VERSION = VRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR DEC(_SGI_COMPILER_VERSION/100)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR DEC(_SGI_COMPILER_VERSION/10 % 10)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(_SGI_COMPILER_VERSION    % 10)[m
[32m+[m[32m# else[m
[32m+[m[32m  /* _COMPILER_VERSION = VRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR DEC(_COMPILER_VERSION/100)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR DEC(_COMPILER_VERSION/10 % 10)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(_COMPILER_VERSION    % 10)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m
[32m+[m[32m/* These compilers are either not known or too old to define an[m
[32m+[m[32m  identification macro.  Try to identify the platform and guess that[m
[32m+[m[32m  it is the native compiler.  */[m
[32m+[m[32m#elif defined(__sgi)[m
[32m+[m[32m# define COMPILER_ID "MIPSpro"[m
[32m+[m
[32m+[m[32m#elif defined(__hpux) || defined(__hpua)[m
[32m+[m[32m# define COMPILER_ID "HP"[m
[32m+[m
[32m+[m[32m#else /* unknown compiler */[m
[32m+[m[32m# define COMPILER_ID ""[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m/* Construct the string literal in pieces to prevent the source from[m
[32m+[m[32m   getting matched.  Store it in a pointer rather than an array[m
[32m+[m[32m   because some compilers will just produce instructions to fill the[m
[32m+[m[32m   array rather than assigning a pointer to a static array.  */[m
[32m+[m[32mchar const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";[m
[32m+[m[32m#ifdef SIMULATE_ID[m
[32m+[m[32mchar const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m#ifdef __QNXNTO__[m
[32m+[m[32mchar const* qnxnto = "INFO" ":" "qnxnto[]";[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m#if defined(__CRAYXE) || defined(__CRAYXC)[m
[32m+[m[32mchar const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m#define STRINGIFY_HELPER(X) #X[m
[32m+[m[32m#define STRINGIFY(X) STRINGIFY_HELPER(X)[m
[32m+[m
[32m+[m[32m/* Identify known platforms by name.  */[m
[32m+[m[32m#if defined(__linux) || defined(__linux__) || defined(linux)[m
[32m+[m[32m# define PLATFORM_ID "Linux"[m
[32m+[m
[32m+[m[32m#elif defined(__CYGWIN__)[m
[32m+[m[32m# define PLATFORM_ID "Cygwin"[m
[32m+[m
[32m+[m[32m#elif defined(__MINGW32__)[m
[32m+[m[32m# define PLATFORM_ID "MinGW"[m
[32m+[m
[32m+[m[32m#elif defined(__APPLE__)[m
[32m+[m[32m# define PLATFORM_ID "Darwin"[m
[32m+[m
[32m+[m[32m#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)[m
[32m+[m[32m# define PLATFORM_ID "Windows"[m
[32m+[m
[32m+[m[32m#elif defined(__FreeBSD__) || defined(__FreeBSD)[m
[32m+[m[32m# define PLATFORM_ID "FreeBSD"[m
[32m+[m
[32m+[m[32m#elif defined(__NetBSD__) || defined(__NetBSD)[m
[32m+[m[32m# define PLATFORM_ID "NetBSD"[m
[32m+[m
[32m+[m[32m#elif defined(__OpenBSD__) || defined(__OPENBSD)[m
[32m+[m[32m# define PLATFORM_ID "OpenBSD"[m
[32m+[m
[32m+[m[32m#elif defined(__sun) || defined(sun)[m
[32m+[m[32m# define PLATFORM_ID "SunOS"[m
[32m+[m
[32m+[m[32m#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)[m
[32m+[m[32m# define PLATFORM_ID "AIX"[m
[32m+[m
[32m+[m[32m#elif defined(__sgi) || defined(__sgi__) || defined(_SGI)[m
[32m+[m[32m# define PLATFORM_ID "IRIX"[m
[32m+[m
[32m+[m[32m#elif defined(__hpux) || defined(__hpux__)[m
[32m+[m[32m# define PLATFORM_ID "HP-UX"[m
[32m+[m
[32m+[m[32m#elif defined(__HAIKU__)[m
[32m+[m[32m# define PLATFORM_ID "Haiku"[m
[32m+[m
[32m+[m[32m#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)[m
[32m+[m[32m# define PLATFORM_ID "BeOS"[m
[32m+[m
[32m+[m[32m#elif defined(__QNX__) || defined(__QNXNTO__)[m
[32m+[m[32m# define PLATFORM_ID "QNX"[m
[32m+[m
[32m+[m[32m#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)[m
[32m+[m[32m# define PLATFORM_ID "Tru64"[m
[32m+[m
[32m+[m[32m#elif defined(__riscos) || defined(__riscos__)[m
[32m+[m[32m# define PLATFORM_ID "RISCos"[m
[32m+[m
[32m+[m[32m#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)[m
[32m+[m[32m# define PLATFORM_ID "SINIX"[m
[32m+[m
[32m+[m[32m#elif defined(__UNIX_SV__)[m
[32m+[m[32m# define PLATFORM_ID "UNIX_SV"[m
[32m+[m
[32m+[m[32m#elif defined(__bsdos__)[m
[32m+[m[32m# define PLATFORM_ID "BSDOS"[m
[32m+[m
[32m+[m[32m#elif defined(_MPRAS) || defined(MPRAS)[m
[32m+[m[32m# define PLATFORM_ID "MP-RAS"[m
[32m+[m
[32m+[m[32m#elif defined(__osf) || defined(__osf__)[m
[32m+[m[32m# define PLATFORM_ID "OSF1"[m
[32m+[m
[32m+[m[32m#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)[m
[32m+[m[32m# define PLATFORM_ID "SCO_SV"[m
[32m+[m
[32m+[m[32m#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)[m
[32m+[m[32m# define PLATFORM_ID "ULTRIX"[m
[32m+[m
[32m+[m[32m#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)[m
[32m+[m[32m# define PLATFORM_ID "Xenix"[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__)[m
[32m+[m[32m# if defined(__LINUX__)[m
[32m+[m[32m#  define PLATFORM_ID "Linux"[m
[32m+[m
[32m+[m[32m# elif defined(__DOS__)[m
[32m+[m[32m#  define PLATFORM_ID "DOS"[m
[32m+[m
[32m+[m[32m# elif defined(__OS2__)[m
[32m+[m[32m#  define PLATFORM_ID "OS2"[m
[32m+[m
[32m+[m[32m# elif defined(__WINDOWS__)[m
[32m+[m[32m#  define PLATFORM_ID "Windows3x"[m
[32m+[m
[32m+[m[32m# else /* unknown platform */[m
[32m+[m[32m#  define PLATFORM_ID ""[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#else /* unknown platform */[m
[32m+[m[32m# define PLATFORM_ID ""[m
[32m+[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m/* For windows compilers MSVC and Intel we can determine[m
[32m+[m[32m   the architecture of the compiler being used.  This is because[m
[32m+[m[32m   the compilers do not have flags that can change the architecture,[m
[32m+[m[32m   but rather depend on which compiler is being used[m
[32m+[m[32m*/[m
[32m+[m[32m#if defined(_WIN32) && defined(_MSC_VER)[m
[32m+[m[32m# if defined(_M_IA64)[m
[32m+[m[32m#  define ARCHITECTURE_ID "IA64"[m
[32m+[m
[32m+[m[32m# elif defined(_M_X64) || defined(_M_AMD64)[m
[32m+[m[32m#  define ARCHITECTURE_ID "x64"[m
[32m+[m
[32m+[m[32m# elif defined(_M_IX86)[m
[32m+[m[32m#  define ARCHITECTURE_ID "X86"[m
[32m+[m
[32m+[m[32m# elif defined(_M_ARM)[m
[32m+[m[32m#  if _M_ARM == 4[m
[32m+[m[32m#   define ARCHITECTURE_ID "ARMV4I"[m
[32m+[m[32m#  elif _M_ARM == 5[m
[32m+[m[32m#   define ARCHITECTURE_ID "ARMV5I"[m
[32m+[m[32m#  else[m
[32m+[m[32m#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)[m
[32m+[m[32m#  endif[m
[32m+[m
[32m+[m[32m# elif defined(_M_MIPS)[m
[32m+[m[32m#  define ARCHITECTURE_ID "MIPS"[m
[32m+[m
[32m+[m[32m# elif defined(_M_SH)[m
[32m+[m[32m#  define ARCHITECTURE_ID "SHx"[m
[32m+[m
[32m+[m[32m# else /* unknown architecture */[m
[32m+[m[32m#  define ARCHITECTURE_ID ""[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__)[m
[32m+[m[32m# if defined(_M_I86)[m
[32m+[m[32m#  define ARCHITECTURE_ID "I86"[m
[32m+[m
[32m+[m[32m# elif defined(_M_IX86)[m
[32m+[m[32m#  define ARCHITECTURE_ID "X86"[m
[32m+[m
[32m+[m[32m# else /* unknown architecture */[m
[32m+[m[32m#  define ARCHITECTURE_ID ""[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#else[m
[32m+[m[32m#  define ARCHITECTURE_ID ""[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m/* Convert integer to decimal digit literals.  */[m
[32m+[m[32m#define DEC(n)                   \[m
[32m+[m[32m  ('0' + (((n) / 10000000)%10)), \[m
[32m+[m[32m  ('0' + (((n) / 1000000)%10)),  \[m
[32m+[m[32m  ('0' + (((n) / 100000)%10)),   \[m
[32m+[m[32m  ('0' + (((n) / 10000)%10)),    \[m
[32m+[m[32m  ('0' + (((n) / 1000)%10)),     \[m
[32m+[m[32m  ('0' + (((n) / 100)%10)),      \[m
[32m+[m[32m  ('0' + (((n) / 10)%10)),       \[m
[32m+[m[32m  ('0' +  ((n) % 10))[m
[32m+[m
[32m+[m[32m/* Convert integer to hex digit literals.  */[m
[32m+[m[32m#define HEX(n)             \[m
[32m+[m[32m  ('0' + ((n)>>28 & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>24 & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>20 & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>16 & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>12 & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>8  & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)>>4  & 0xF)), \[m
[32m+[m[32m  ('0' + ((n)     & 0xF))[m
[32m+[m
[32m+[m[32m/* Construct a string literal encoding the version number components. */[m
[32m+[m[32m#ifdef COMPILER_VERSION_MAJOR[m
[32m+[m[32mchar const info_version[] = {[m
[32m+[m[32m  'I', 'N', 'F', 'O', ':',[m
[32m+[m[32m  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',[m
[32m+[m[32m  COMPILER_VERSION_MAJOR,[m
[32m+[m[32m# ifdef COMPILER_VERSION_MINOR[m
[32m+[m[32m  '.', COMPILER_VERSION_MINOR,[m
[32m+[m[32m#  ifdef COMPILER_VERSION_PATCH[m
[32m+[m[32m   '.', COMPILER_VERSION_PATCH,[m
[32m+[m[32m#   ifdef COMPILER_VERSION_TWEAK[m
[32m+[m[32m    '.', COMPILER_VERSION_TWEAK,[m
[32m+[m[32m#   endif[m
[32m+[m[32m#  endif[m
[32m+[m[32m# endif[m
[32m+[m[32m  ']','\0'};[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m/* Construct a string literal encoding the version number components. */[m
[32m+[m[32m#ifdef SIMULATE_VERSION_MAJOR[m
[32m+[m[32mchar const info_simulate_version[] = {[m
[32m+[m[32m  'I', 'N', 'F', 'O', ':',[m
[32m+[m[32m  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',[m
[32m+[m[32m  SIMULATE_VERSION_MAJOR,[m
[32m+[m[32m# ifdef SIMULATE_VERSION_MINOR[m
[32m+[m[32m  '.', SIMULATE_VERSION_MINOR,[m
[32m+[m[32m#  ifdef SIMULATE_VERSION_PATCH[m
[32m+[m[32m   '.', SIMULATE_VERSION_PATCH,[m
[32m+[m[32m#   ifdef SIMULATE_VERSION_TWEAK[m
[32m+[m[32m    '.', SIMULATE_VERSION_TWEAK,[m
[32m+[m[32m#   endif[m
[32m+[m[32m#  endif[m
[32m+[m[32m# endif[m
[32m+[m[32m  ']','\0'};[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m[32m/* Construct the string literal in pieces to prevent the source from[m
[32m+[m[32m   getting matched.  Store it in a pointer rather than an array[m
[32m+[m[32m   because some compilers will just produce instructions to fill the[m
[32m+[m[32m   array rather than assigning a pointer to a static array.  */[m
[32m+[m[32mchar const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";[m
[32m+[m[32mchar const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mconst char* info_language_dialect_default = "INFO" ":" "dialect_default["[m
[32m+[m[32m#if !defined(__STDC_VERSION__)[m
[32m+[m[32m  "90"[m
[32m+[m[32m#elif __STDC_VERSION__ >= 201000L[m
[32m+[m[32m  "11"[m
[32m+[m[32m#elif __STDC_VERSION__ >= 199901L[m
[32m+[m[32m  "99"[m
[32m+[m[32m#else[m
[32m+[m[32m#endif[m
[32m+[m[32m"]";[m
[32m+[m
[32m+[m[32m/*--------------------------------------------------------------------------*/[m
[32m+[m
[32m+[m[32m#ifdef ID_VOID_MAIN[m
[32m+[m[32mvoid main() {}[m
[32m+[m[32m#else[m
[32m+[m[32mint main(int argc, char* argv[])[m
[32m+[m[32m{[m
[32m+[m[32m  int require = 0;[m
[32m+[m[32m  require += info_compiler[argc];[m
[32m+[m[32m  require += info_platform[argc];[m
[32m+[m[32m  require += info_arch[argc];[m
[32m+[m[32m#ifdef COMPILER_VERSION_MAJOR[m
[32m+[m[32m  require += info_version[argc];[m
[32m+[m[32m#endif[m
[32m+[m[32m#ifdef SIMULATE_ID[m
[32m+[m[32m  require += info_simulate[argc];[m
[32m+[m[32m#endif[m
[32m+[m[32m#ifdef SIMULATE_VERSION_MAJOR[m
[32m+[m[32m  require += info_simulate_version[argc];[m
[32m+[m[32m#endif[m
[32m+[m[32m#if defined(__CRAYXE) || defined(__CRAYXC)[m
[32m+[m[32m  require += info_cray[argc];[m
[32m+[m[32m#endif[m
[32m+[m[32m  require += info_language_dialect_default[argc];[m
[32m+[m[32m  (void)argv;[m
[32m+[m[32m  return require;[m
[32m+[m[32m}[m
[32m+[m[32m#endif[m
[1mdiff --git a/build/CMakeFiles/3.5.1/CompilerIdC/a.out b/build/CMakeFiles/3.5.1/CompilerIdC/a.out[m
[1mnew file mode 100755[m
[1mindex 0000000..fb72cd4[m
Binary files /dev/null and b/build/CMakeFiles/3.5.1/CompilerIdC/a.out differ
[1mdiff --git a/build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp b/build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..e6d8536[m
[1m--- /dev/null[m
[1m+++ b/build/CMakeFiles/3.5.1/CompilerIdCXX/CMakeCXXCompilerId.cpp[m
[36m@@ -0,0 +1,533 @@[m
[32m+[m[32m/* This source file must have a .cpp extension so that all C++ compilers[m
[32m+[m[32m   recognize the extension without flags.  Borland does not know .cxx for[m
[32m+[m[32m   example.  */[m
[32m+[m[32m#ifndef __cplusplus[m
[32m+[m[32m# error "A C compiler has been selected for C++."[m
[32m+[m[32m#endif[m
[32m+[m
[32m+[m
[32m+[m[32m/* Version number components: V=Version, R=Revision, P=Patch[m
[32m+[m[32m   Version date components:   YYYY=Year, MM=Month,   DD=Day  */[m
[32m+[m
[32m+[m[32m#if defined(__COMO__)[m
[32m+[m[32m# define COMPILER_ID "Comeau"[m
[32m+[m[32m  /* __COMO_VERSION__ = VRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__COMO_VERSION__ / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__COMO_VERSION__ % 100)[m
[32m+[m
[32m+[m[32m#elif defined(__INTEL_COMPILER) || defined(__ICC)[m
[32m+[m[32m# define COMPILER_ID "Intel"[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m#  define SIMULATE_ID "MSVC"[m
[32m+[m[32m# endif[m
[32m+[m[32m  /* __INTEL_COMPILER = VRP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)[m
[32m+[m[32m# if defined(__INTEL_COMPILER_UPDATE)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)[m
[32m+[m[32m# else[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(__INTEL_COMPILER_BUILD_DATE)[m
[32m+[m[32m  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */[m
[32m+[m[32m#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)[m
[32m+[m[32m# endif[m
[32m+[m[32m# if defined(_MSC_VER)[m
[32m+[m[32m   /* _MSC_VER = VVRR */[m
[32m+[m[32m#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)[m
[32m+[m[32m#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__PATHCC__)[m
[32m+[m[32m# define COMPILER_ID "PathScale"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)[m
[32m+[m[32m# if defined(__PATHCC_PATCHLEVEL__)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)[m
[32m+[m[32m# define COMPILER_ID "Embarcadero"[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)[m
[32m+[m
[32m+[m[32m#elif defined(__BORLANDC__)[m
[32m+[m[32m# define COMPILER_ID "Borland"[m
[32m+[m[32m  /* __BORLANDC__ = 0xVRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__) && __WATCOMC__ < 1200[m
[32m+[m[32m# define COMPILER_ID "Watcom"[m
[32m+[m[32m   /* __WATCOMC__ = VVRR */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)[m
[32m+[m[32m# if (__WATCOMC__ % 10) > 0[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__WATCOMC__)[m
[32m+[m[32m# define COMPILER_ID "OpenWatcom"[m
[32m+[m[32m   /* __WATCOMC__ = VVRP + 1100 */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)[m
[32m+[m[32m# if (__WATCOMC__ % 10) > 0[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__SUNPRO_CC)[m
[32m+[m[32m# define COMPILER_ID "SunPro"[m
[32m+[m[32m# if __SUNPRO_CC >= 0x5100[m
[32m+[m[32m   /* __SUNPRO_CC = 0xVRRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)[m
[32m+[m[32m# else[m
[32m+[m[32m   /* __SUNPRO_CC = 0xVRP */[m
[32m+[m[32m#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)[m
[32m+[m[32m#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)[m
[32m+[m[32m#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)[m
[32m+[m[32m# endif[m
[32m+[m
[32m+[m[32m#elif defined(__HP_aCC)[m
[32m+[m[32m# define COMPILER_ID "HP"[m
[32m+[m[32m  /* __HP_aCC = VVRRPP */[m
[32m+[m[32m# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)[m
[32m+[m[32m# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)[m
[32m+[m[32m# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)[m
[32m+[m
[32m+[m[32m#elif defined(__DECCXX)[m
[32m+[m[32m# define COMPILER_ID "Compaq"[m
[32m+[m[32m  /* __DECCXX_VER = VVRRTPPPP */[m
[32m+[m[32m# define COMPILER_VERSION_M